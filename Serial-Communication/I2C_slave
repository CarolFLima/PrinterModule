/*
 * File:   main.c
 * Author: Felipe
 *
 * Created on 2 de Novembro de 2016, 16:27
 */
#include <xc.h>
// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)
// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)
// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.
#define _XTAL_FREQ 4000000
short z;
unsigned char x = 0x00;
void interrupt I2C_Slave_Read()
{ 
    if(SSPIF == 1)
    {
       SSPCONbits.CKP = 0;          // Clock Polarity Select bit, Idle state for clock is a low level
       
       if ((SSPCONbits.SSPOV) || (SSPCONbits.WCOL))     
        // If overflow (SSPOV): new byte is received while SSPBUF still holds the previous data
        //  or collision (WCOL): A write to SSPBUF was attempted while the I2C conditions were not valid 
        //                       for a transmission to be started
       {
             z = SSPBUF;            // Read the previous value to clear the buffer
             SSPCONbits.SSPOV = 0;  // Clear the overflow flag
             SSPCONbits.WCOL = 0;   // Clear the collision bit
             SSPCONbits.CKP = 1;    // Clock Polarity Select bit, Idle state for clock is a high level
       }
      if(!SSPSTATbits.D_nA && !SSPSTATbits.R_nW)        // If last byte was Address + Write
       {
           z = SSPBUF;              // Read buffer
           while(!BF);              // Wait for the buffer to be empty
           PORTA = SSPBUF;          // Write value on buffer to port A
           SSPCONbits.CKP = 1;      // Clock Polarity Select bit, Idle state for clock is a high level
           SSPM3 = 0;               // SSPM3 == 0 -> I2C slave mode 10 or 7 bit address
       }
       else if(!SSPSTATbits.D_nA && SSPSTATbits.R_nW)   // If last byte was Address + Read
       {
           z = SSPBUF;              // Read buffer
           BF = 0;                  // Set buffer as empty
           SSPBUF = x = x ^ 0x01;   // Write x first bite to SSPBUF
           SSPCONbits.CKP = 1;      // Clock Polarity Select bit, Idle state for clock is a high level
           while(SSPSTATbits.BF);   // Wait for the buffer to be full
       }
       
       SSPIF = 0;                   // Clean Master Synchronous Serial Port (MSSP) Interrupt Flag bit

    }
}
void I2C_Slave_Init(short address)
{
    SSPSTAT = 0x80;                 // 1000 0000
    SSPADD = address;               // Synchronous Serial Port Address Register
//    SSPCON = 0x36;                // 0011 0110
    SSPCON = 0b00110110;
    SSPCON2 = 0x01;                 // 0000 0001
    TRISC3 = 1;                     // Setting as input as given in datasheet
    TRISC4 = 1;                     // Setting as input as given in datasheet
    GIE = 1;                        // Global interrupt enable
    PEIE = 1;                       // Peripheral interrupt enable
    SSPIF = 0;                      // Clear interrupt flag
    SSPIE = 1;                      // Synchronous serial port interrupt enable
}
void main(void) {
    nRBPU = 0;                      //Enables PORTB internal pull up resistors
    TRISB = 0xFF;                   //PORTB as input
    TRISA = 0x00;                   //PORTD as output
    PORTA = 0x00;                   //All LEDs OFF
    I2C_Slave_Init(0x30);           //Initialize as a I2C Slave with address 0x30
    while(1);
}
